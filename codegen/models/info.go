// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// Info info
//
// swagger:model info
type Info struct {

	// amount of cards
	AmountOfCards int64 `json:"amountOfCards"`

	// formatted as RFC 3339
	// Format: date-time
	LastUpdate strfmt.DateTime `json:"lastUpdate,omitempty"`

	// formatted as RFC 3339
	// Format: date-time
	SystemStartTime strfmt.DateTime `json:"systemStartTime,omitempty"`
}

// Validate validates this info
func (m *Info) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateLastUpdate(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSystemStartTime(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *Info) validateLastUpdate(formats strfmt.Registry) error {
	if swag.IsZero(m.LastUpdate) { // not required
		return nil
	}

	if err := validate.FormatOf("lastUpdate", "body", "date-time", m.LastUpdate.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *Info) validateSystemStartTime(formats strfmt.Registry) error {
	if swag.IsZero(m.SystemStartTime) { // not required
		return nil
	}

	if err := validate.FormatOf("systemStartTime", "body", "date-time", m.SystemStartTime.String(), formats); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this info based on context it is used
func (m *Info) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *Info) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *Info) UnmarshalBinary(b []byte) error {
	var res Info
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
