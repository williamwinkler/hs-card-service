// Code generated by go-swagger; DO NOT EDIT.

package cards

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"net/http"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/runtime/middleware"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// NewGetCardsParams creates a new GetCardsParams object
// with the default values initialized.
func NewGetCardsParams() GetCardsParams {

	var (
		// initialize parameters with default values

		limitDefault = int64(20)

		pageDefault = int64(1)
	)

	return GetCardsParams{
		Limit: &limitDefault,

		Page: &pageDefault,
	}
}

// GetCardsParams contains all the bound params for the get cards operation
// typically these are obtained from a http.Request
//
// swagger:parameters GetCards
type GetCardsParams struct {

	// HTTP Request Object
	HTTPRequest *http.Request `json:"-"`

	/*
	  Minimum: 0
	  In: query
	*/
	Attack *int64
	/*
	  Maximum: 14
	  Minimum: 1
	  In: query
	*/
	Class *int64
	/*
	  Minimum: 0
	  In: query
	*/
	Health *int64
	/*
	  In: query
	*/
	Keywords []int64
	/*
	  Maximum: 100
	  Minimum: 1
	  In: query
	  Default: 20
	*/
	Limit *int64
	/*
	  Maximum: 99
	  Minimum: 0
	  In: query
	*/
	ManaCost *int64
	/*
	  Min Length: 1
	  In: query
	*/
	Name *string
	/*
	  Minimum: 1
	  In: query
	  Default: 1
	*/
	Page *int64
	/*
	  Maximum: 5
	  Minimum: 1
	  In: query
	*/
	Rarity *int64
	/*
	  In: query
	*/
	Set *int64
	/*
	  In: query
	*/
	Type []int64
}

// BindRequest both binds and validates a request, it assumes that complex things implement a Validatable(strfmt.Registry) error interface
// for simple values it will use straight method calls.
//
// To ensure default values, the struct must have been initialized with NewGetCardsParams() beforehand.
func (o *GetCardsParams) BindRequest(r *http.Request, route *middleware.MatchedRoute) error {
	var res []error

	o.HTTPRequest = r

	qs := runtime.Values(r.URL.Query())

	qAttack, qhkAttack, _ := qs.GetOK("attack")
	if err := o.bindAttack(qAttack, qhkAttack, route.Formats); err != nil {
		res = append(res, err)
	}

	qClass, qhkClass, _ := qs.GetOK("class")
	if err := o.bindClass(qClass, qhkClass, route.Formats); err != nil {
		res = append(res, err)
	}

	qHealth, qhkHealth, _ := qs.GetOK("health")
	if err := o.bindHealth(qHealth, qhkHealth, route.Formats); err != nil {
		res = append(res, err)
	}

	qKeywords, qhkKeywords, _ := qs.GetOK("keywords")
	if err := o.bindKeywords(qKeywords, qhkKeywords, route.Formats); err != nil {
		res = append(res, err)
	}

	qLimit, qhkLimit, _ := qs.GetOK("limit")
	if err := o.bindLimit(qLimit, qhkLimit, route.Formats); err != nil {
		res = append(res, err)
	}

	qManaCost, qhkManaCost, _ := qs.GetOK("manaCost")
	if err := o.bindManaCost(qManaCost, qhkManaCost, route.Formats); err != nil {
		res = append(res, err)
	}

	qName, qhkName, _ := qs.GetOK("name")
	if err := o.bindName(qName, qhkName, route.Formats); err != nil {
		res = append(res, err)
	}

	qPage, qhkPage, _ := qs.GetOK("page")
	if err := o.bindPage(qPage, qhkPage, route.Formats); err != nil {
		res = append(res, err)
	}

	qRarity, qhkRarity, _ := qs.GetOK("rarity")
	if err := o.bindRarity(qRarity, qhkRarity, route.Formats); err != nil {
		res = append(res, err)
	}

	qSet, qhkSet, _ := qs.GetOK("set")
	if err := o.bindSet(qSet, qhkSet, route.Formats); err != nil {
		res = append(res, err)
	}

	qType, qhkType, _ := qs.GetOK("type")
	if err := o.bindType(qType, qhkType, route.Formats); err != nil {
		res = append(res, err)
	}
	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// bindAttack binds and validates parameter Attack from query.
func (o *GetCardsParams) bindAttack(rawData []string, hasKey bool, formats strfmt.Registry) error {
	var raw string
	if len(rawData) > 0 {
		raw = rawData[len(rawData)-1]
	}

	// Required: false
	// AllowEmptyValue: false

	if raw == "" { // empty values pass all other validations
		return nil
	}

	value, err := swag.ConvertInt64(raw)
	if err != nil {
		return errors.InvalidType("attack", "query", "int64", raw)
	}
	o.Attack = &value

	if err := o.validateAttack(formats); err != nil {
		return err
	}

	return nil
}

// validateAttack carries on validations for parameter Attack
func (o *GetCardsParams) validateAttack(formats strfmt.Registry) error {

	if err := validate.MinimumInt("attack", "query", *o.Attack, 0, false); err != nil {
		return err
	}

	return nil
}

// bindClass binds and validates parameter Class from query.
func (o *GetCardsParams) bindClass(rawData []string, hasKey bool, formats strfmt.Registry) error {
	var raw string
	if len(rawData) > 0 {
		raw = rawData[len(rawData)-1]
	}

	// Required: false
	// AllowEmptyValue: false

	if raw == "" { // empty values pass all other validations
		return nil
	}

	value, err := swag.ConvertInt64(raw)
	if err != nil {
		return errors.InvalidType("class", "query", "int64", raw)
	}
	o.Class = &value

	if err := o.validateClass(formats); err != nil {
		return err
	}

	return nil
}

// validateClass carries on validations for parameter Class
func (o *GetCardsParams) validateClass(formats strfmt.Registry) error {

	if err := validate.MinimumInt("class", "query", *o.Class, 1, false); err != nil {
		return err
	}

	if err := validate.MaximumInt("class", "query", *o.Class, 14, false); err != nil {
		return err
	}

	return nil
}

// bindHealth binds and validates parameter Health from query.
func (o *GetCardsParams) bindHealth(rawData []string, hasKey bool, formats strfmt.Registry) error {
	var raw string
	if len(rawData) > 0 {
		raw = rawData[len(rawData)-1]
	}

	// Required: false
	// AllowEmptyValue: false

	if raw == "" { // empty values pass all other validations
		return nil
	}

	value, err := swag.ConvertInt64(raw)
	if err != nil {
		return errors.InvalidType("health", "query", "int64", raw)
	}
	o.Health = &value

	if err := o.validateHealth(formats); err != nil {
		return err
	}

	return nil
}

// validateHealth carries on validations for parameter Health
func (o *GetCardsParams) validateHealth(formats strfmt.Registry) error {

	if err := validate.MinimumInt("health", "query", *o.Health, 0, false); err != nil {
		return err
	}

	return nil
}

// bindKeywords binds and validates array parameter Keywords from query.
//
// Arrays are parsed according to CollectionFormat: "" (defaults to "csv" when empty).
func (o *GetCardsParams) bindKeywords(rawData []string, hasKey bool, formats strfmt.Registry) error {
	var qvKeywords string
	if len(rawData) > 0 {
		qvKeywords = rawData[len(rawData)-1]
	}

	// CollectionFormat:
	keywordsIC := swag.SplitByFormat(qvKeywords, "")
	if len(keywordsIC) == 0 {
		return nil
	}

	var keywordsIR []int64
	for i, keywordsIV := range keywordsIC {
		keywordsI, err := swag.ConvertInt64(keywordsIV)
		if err != nil {
			return errors.InvalidType(fmt.Sprintf("%s.%v", "keywords", i), "query", "int64", keywordsI)
		}

		keywordsIR = append(keywordsIR, keywordsI)
	}

	o.Keywords = keywordsIR

	return nil
}

// bindLimit binds and validates parameter Limit from query.
func (o *GetCardsParams) bindLimit(rawData []string, hasKey bool, formats strfmt.Registry) error {
	var raw string
	if len(rawData) > 0 {
		raw = rawData[len(rawData)-1]
	}

	// Required: false
	// AllowEmptyValue: false

	if raw == "" { // empty values pass all other validations
		// Default values have been previously initialized by NewGetCardsParams()
		return nil
	}

	value, err := swag.ConvertInt64(raw)
	if err != nil {
		return errors.InvalidType("limit", "query", "int64", raw)
	}
	o.Limit = &value

	if err := o.validateLimit(formats); err != nil {
		return err
	}

	return nil
}

// validateLimit carries on validations for parameter Limit
func (o *GetCardsParams) validateLimit(formats strfmt.Registry) error {

	if err := validate.MinimumInt("limit", "query", *o.Limit, 1, false); err != nil {
		return err
	}

	if err := validate.MaximumInt("limit", "query", *o.Limit, 100, false); err != nil {
		return err
	}

	return nil
}

// bindManaCost binds and validates parameter ManaCost from query.
func (o *GetCardsParams) bindManaCost(rawData []string, hasKey bool, formats strfmt.Registry) error {
	var raw string
	if len(rawData) > 0 {
		raw = rawData[len(rawData)-1]
	}

	// Required: false
	// AllowEmptyValue: false

	if raw == "" { // empty values pass all other validations
		return nil
	}

	value, err := swag.ConvertInt64(raw)
	if err != nil {
		return errors.InvalidType("manaCost", "query", "int64", raw)
	}
	o.ManaCost = &value

	if err := o.validateManaCost(formats); err != nil {
		return err
	}

	return nil
}

// validateManaCost carries on validations for parameter ManaCost
func (o *GetCardsParams) validateManaCost(formats strfmt.Registry) error {

	if err := validate.MinimumInt("manaCost", "query", *o.ManaCost, 0, false); err != nil {
		return err
	}

	if err := validate.MaximumInt("manaCost", "query", *o.ManaCost, 99, false); err != nil {
		return err
	}

	return nil
}

// bindName binds and validates parameter Name from query.
func (o *GetCardsParams) bindName(rawData []string, hasKey bool, formats strfmt.Registry) error {
	var raw string
	if len(rawData) > 0 {
		raw = rawData[len(rawData)-1]
	}

	// Required: false
	// AllowEmptyValue: false

	if raw == "" { // empty values pass all other validations
		return nil
	}
	o.Name = &raw

	if err := o.validateName(formats); err != nil {
		return err
	}

	return nil
}

// validateName carries on validations for parameter Name
func (o *GetCardsParams) validateName(formats strfmt.Registry) error {

	if err := validate.MinLength("name", "query", *o.Name, 1); err != nil {
		return err
	}

	return nil
}

// bindPage binds and validates parameter Page from query.
func (o *GetCardsParams) bindPage(rawData []string, hasKey bool, formats strfmt.Registry) error {
	var raw string
	if len(rawData) > 0 {
		raw = rawData[len(rawData)-1]
	}

	// Required: false
	// AllowEmptyValue: false

	if raw == "" { // empty values pass all other validations
		// Default values have been previously initialized by NewGetCardsParams()
		return nil
	}

	value, err := swag.ConvertInt64(raw)
	if err != nil {
		return errors.InvalidType("page", "query", "int64", raw)
	}
	o.Page = &value

	if err := o.validatePage(formats); err != nil {
		return err
	}

	return nil
}

// validatePage carries on validations for parameter Page
func (o *GetCardsParams) validatePage(formats strfmt.Registry) error {

	if err := validate.MinimumInt("page", "query", *o.Page, 1, false); err != nil {
		return err
	}

	return nil
}

// bindRarity binds and validates parameter Rarity from query.
func (o *GetCardsParams) bindRarity(rawData []string, hasKey bool, formats strfmt.Registry) error {
	var raw string
	if len(rawData) > 0 {
		raw = rawData[len(rawData)-1]
	}

	// Required: false
	// AllowEmptyValue: false

	if raw == "" { // empty values pass all other validations
		return nil
	}

	value, err := swag.ConvertInt64(raw)
	if err != nil {
		return errors.InvalidType("rarity", "query", "int64", raw)
	}
	o.Rarity = &value

	if err := o.validateRarity(formats); err != nil {
		return err
	}

	return nil
}

// validateRarity carries on validations for parameter Rarity
func (o *GetCardsParams) validateRarity(formats strfmt.Registry) error {

	if err := validate.MinimumInt("rarity", "query", *o.Rarity, 1, false); err != nil {
		return err
	}

	if err := validate.MaximumInt("rarity", "query", *o.Rarity, 5, false); err != nil {
		return err
	}

	return nil
}

// bindSet binds and validates parameter Set from query.
func (o *GetCardsParams) bindSet(rawData []string, hasKey bool, formats strfmt.Registry) error {
	var raw string
	if len(rawData) > 0 {
		raw = rawData[len(rawData)-1]
	}

	// Required: false
	// AllowEmptyValue: false

	if raw == "" { // empty values pass all other validations
		return nil
	}

	value, err := swag.ConvertInt64(raw)
	if err != nil {
		return errors.InvalidType("set", "query", "int64", raw)
	}
	o.Set = &value

	return nil
}

// bindType binds and validates array parameter Type from query.
//
// Arrays are parsed according to CollectionFormat: "" (defaults to "csv" when empty).
func (o *GetCardsParams) bindType(rawData []string, hasKey bool, formats strfmt.Registry) error {
	var qvType string
	if len(rawData) > 0 {
		qvType = rawData[len(rawData)-1]
	}

	// CollectionFormat:
	typeIC := swag.SplitByFormat(qvType, "")
	if len(typeIC) == 0 {
		return nil
	}

	var typeIR []int64
	for i, typeIV := range typeIC {
		typeI, err := swag.ConvertInt64(typeIV)
		if err != nil {
			return errors.InvalidType(fmt.Sprintf("%s.%v", "type", i), "query", "int64", typeI)
		}

		typeIR = append(typeIR, typeI)
	}

	o.Type = typeIR

	return nil
}
