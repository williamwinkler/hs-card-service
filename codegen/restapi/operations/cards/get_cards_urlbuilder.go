// Code generated by go-swagger; DO NOT EDIT.

package cards

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"errors"
	"net/url"
	golangswaggerpaths "path"

	"github.com/go-openapi/swag"
)

// GetCardsURL generates an URL for the get cards operation
type GetCardsURL struct {
	Attack   *int64
	Class    *int64
	Health   *int64
	Keywords []int64
	Limit    *int64
	ManaCost *int64
	Name     *string
	Page     *int64
	Rarity   *int64
	Set      *int64
	Type     []int64

	_basePath string
	// avoid unkeyed usage
	_ struct{}
}

// WithBasePath sets the base path for this url builder, only required when it's different from the
// base path specified in the swagger spec.
// When the value of the base path is an empty string
func (o *GetCardsURL) WithBasePath(bp string) *GetCardsURL {
	o.SetBasePath(bp)
	return o
}

// SetBasePath sets the base path for this url builder, only required when it's different from the
// base path specified in the swagger spec.
// When the value of the base path is an empty string
func (o *GetCardsURL) SetBasePath(bp string) {
	o._basePath = bp
}

// Build a url path and query string
func (o *GetCardsURL) Build() (*url.URL, error) {
	var _result url.URL

	var _path = "/cards"

	_basePath := o._basePath
	if _basePath == "" {
		_basePath = "/api/v1"
	}
	_result.Path = golangswaggerpaths.Join(_basePath, _path)

	qs := make(url.Values)

	var attackQ string
	if o.Attack != nil {
		attackQ = swag.FormatInt64(*o.Attack)
	}
	if attackQ != "" {
		qs.Set("attack", attackQ)
	}

	var classQ string
	if o.Class != nil {
		classQ = swag.FormatInt64(*o.Class)
	}
	if classQ != "" {
		qs.Set("class", classQ)
	}

	var healthQ string
	if o.Health != nil {
		healthQ = swag.FormatInt64(*o.Health)
	}
	if healthQ != "" {
		qs.Set("health", healthQ)
	}

	var keywordsIR []string
	for _, keywordsI := range o.Keywords {
		keywordsIS := swag.FormatInt64(keywordsI)
		if keywordsIS != "" {
			keywordsIR = append(keywordsIR, keywordsIS)
		}
	}

	keywords := swag.JoinByFormat(keywordsIR, "")

	if len(keywords) > 0 {
		qsv := keywords[0]
		if qsv != "" {
			qs.Set("keywords", qsv)
		}
	}

	var limitQ string
	if o.Limit != nil {
		limitQ = swag.FormatInt64(*o.Limit)
	}
	if limitQ != "" {
		qs.Set("limit", limitQ)
	}

	var manaCostQ string
	if o.ManaCost != nil {
		manaCostQ = swag.FormatInt64(*o.ManaCost)
	}
	if manaCostQ != "" {
		qs.Set("manaCost", manaCostQ)
	}

	var nameQ string
	if o.Name != nil {
		nameQ = *o.Name
	}
	if nameQ != "" {
		qs.Set("name", nameQ)
	}

	var pageQ string
	if o.Page != nil {
		pageQ = swag.FormatInt64(*o.Page)
	}
	if pageQ != "" {
		qs.Set("page", pageQ)
	}

	var rarityQ string
	if o.Rarity != nil {
		rarityQ = swag.FormatInt64(*o.Rarity)
	}
	if rarityQ != "" {
		qs.Set("rarity", rarityQ)
	}

	var setQ string
	if o.Set != nil {
		setQ = swag.FormatInt64(*o.Set)
	}
	if setQ != "" {
		qs.Set("set", setQ)
	}

	var typeIR []string
	for _, typeI := range o.Type {
		typeIS := swag.FormatInt64(typeI)
		if typeIS != "" {
			typeIR = append(typeIR, typeIS)
		}
	}

	typeVar := swag.JoinByFormat(typeIR, "")

	if len(typeVar) > 0 {
		qsv := typeVar[0]
		if qsv != "" {
			qs.Set("type", qsv)
		}
	}

	_result.RawQuery = qs.Encode()

	return &_result, nil
}

// Must is a helper function to panic when the url builder returns an error
func (o *GetCardsURL) Must(u *url.URL, err error) *url.URL {
	if err != nil {
		panic(err)
	}
	if u == nil {
		panic("url can't be nil")
	}
	return u
}

// String returns the string representation of the path with query string
func (o *GetCardsURL) String() string {
	return o.Must(o.Build()).String()
}

// BuildFull builds a full url with scheme, host, path and query string
func (o *GetCardsURL) BuildFull(scheme, host string) (*url.URL, error) {
	if scheme == "" {
		return nil, errors.New("scheme is required for a full url on GetCardsURL")
	}
	if host == "" {
		return nil, errors.New("host is required for a full url on GetCardsURL")
	}

	base, err := o.Build()
	if err != nil {
		return nil, err
	}

	base.Scheme = scheme
	base.Host = host
	return base, nil
}

// StringFull returns the string representation of a complete url
func (o *GetCardsURL) StringFull(scheme, host string) string {
	return o.Must(o.BuildFull(scheme, host)).String()
}
