// Code generated by go-swagger; DO NOT EDIT.

package rarities

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	"github.com/go-openapi/runtime/middleware"
)

// GetV1RaritiesHandlerFunc turns a function with the right signature into a get v1 rarities handler
type GetV1RaritiesHandlerFunc func(GetV1RaritiesParams) middleware.Responder

// Handle executing the request and returning a response
func (fn GetV1RaritiesHandlerFunc) Handle(params GetV1RaritiesParams) middleware.Responder {
	return fn(params)
}

// GetV1RaritiesHandler interface for that can handle valid get v1 rarities params
type GetV1RaritiesHandler interface {
	Handle(GetV1RaritiesParams) middleware.Responder
}

// NewGetV1Rarities creates a new http.Handler for the get v1 rarities operation
func NewGetV1Rarities(ctx *middleware.Context, handler GetV1RaritiesHandler) *GetV1Rarities {
	return &GetV1Rarities{Context: ctx, Handler: handler}
}

/*
	GetV1Rarities swagger:route GET /v1/rarities rarities getV1Rarities

Serves the different rarities a card can have. Fx "Common" or "Legendary"
*/
type GetV1Rarities struct {
	Context *middleware.Context
	Handler GetV1RaritiesHandler
}

func (o *GetV1Rarities) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		*r = *rCtx
	}
	var Params = NewGetV1RaritiesParams()
	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request
	o.Context.Respond(rw, r, route.Produces, route, res)

}
