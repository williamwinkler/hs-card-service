// Code generated by go-swagger; DO NOT EDIT.

package classes

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	"github.com/go-openapi/runtime/middleware"
)

// GetV1ClassesHandlerFunc turns a function with the right signature into a get v1 classes handler
type GetV1ClassesHandlerFunc func(GetV1ClassesParams) middleware.Responder

// Handle executing the request and returning a response
func (fn GetV1ClassesHandlerFunc) Handle(params GetV1ClassesParams) middleware.Responder {
	return fn(params)
}

// GetV1ClassesHandler interface for that can handle valid get v1 classes params
type GetV1ClassesHandler interface {
	Handle(GetV1ClassesParams) middleware.Responder
}

// NewGetV1Classes creates a new http.Handler for the get v1 classes operation
func NewGetV1Classes(ctx *middleware.Context, handler GetV1ClassesHandler) *GetV1Classes {
	return &GetV1Classes{Context: ctx, Handler: handler}
}

/*
	GetV1Classes swagger:route GET /v1/classes classes getV1Classes

Serves the different classes cards can have. Fx "Warlock" or "Neutral"
*/
type GetV1Classes struct {
	Context *middleware.Context
	Handler GetV1ClassesHandler
}

func (o *GetV1Classes) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		*r = *rCtx
	}
	var Params = NewGetV1ClassesParams()
	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request
	o.Context.Respond(rw, r, route.Produces, route, res)

}
