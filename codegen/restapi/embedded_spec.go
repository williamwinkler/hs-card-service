// Code generated by go-swagger; DO NOT EDIT.

package restapi

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
)

var (
	// SwaggerJSON embedded version of the swagger document used at generation time
	SwaggerJSON json.RawMessage
	// FlatSwaggerJSON embedded flattened version of the swagger document used at generation time
	FlatSwaggerJSON json.RawMessage
)

func init() {
	SwaggerJSON = json.RawMessage([]byte(`{
  "consumes": [
    "application/json"
  ],
  "produces": [
    "application/json"
  ],
  "schemes": [
    "http"
  ],
  "swagger": "2.0",
  "info": {
    "description": "Serves Hearthstone cards",
    "title": "Hearthstone Card Service",
    "version": "1.0.0"
  },
  "paths": {
    "/": {
      "get": {
        "tags": [
          "info"
        ],
        "summary": "Get information about the service",
        "responses": {
          "200": {
            "description": "Get current status of amount of cards and last update",
            "schema": {
              "type": "object",
              "$ref": "#/definitions/info"
            }
          },
          "500": {
            "description": "Something went wrong",
            "schema": {
              "$ref": "#/definitions/error"
            }
          }
        }
      }
    },
    "/cards": {
      "get": {
        "tags": [
          "cards"
        ],
        "summary": "Get cards with or without query",
        "parameters": [
          {
            "minLength": 1,
            "type": "string",
            "name": "name",
            "in": "query"
          },
          {
            "type": "integer",
            "name": "manaCost",
            "in": "query"
          },
          {
            "type": "integer",
            "name": "health",
            "in": "query"
          },
          {
            "type": "integer",
            "name": "attack",
            "in": "query"
          },
          {
            "maximum": 14,
            "minimum": 1,
            "type": "integer",
            "name": "class",
            "in": "query"
          },
          {
            "maximum": 5,
            "minimum": 1,
            "type": "integer",
            "name": "rarity",
            "in": "query"
          },
          {
            "minimum": 1,
            "type": "integer",
            "default": 1,
            "name": "page",
            "in": "query"
          },
          {
            "maximum": 100,
            "minimum": 1,
            "type": "integer",
            "default": 20,
            "name": "limit",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Returns the cards based on query. If there is no query, cards will be returned based on their manaCost in ascending order.",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/card"
              }
            }
          },
          "400": {
            "description": "The query is incorrect",
            "schema": {
              "$ref": "#/definitions/error"
            }
          },
          "500": {
            "description": "Something went wrong internally",
            "schema": {
              "$ref": "#/definitions/error"
            }
          }
        }
      }
    },
    "/cards/update": {
      "post": {
        "description": "Checks for updates to cards",
        "tags": [
          "cards"
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "401": {
            "description": "Unauthorized request"
          },
          "500": {
            "description": "Something went wrong internally",
            "schema": {
              "$ref": "#/definitions/error"
            }
          }
        }
      }
    }
  },
  "definitions": {
    "card": {
      "type": "object",
      "properties": {
        "artistName": {
          "type": "string",
          "x-omitempty": false
        },
        "attack": {
          "type": "integer",
          "x-omitempty": false
        },
        "cardSetId": {
          "type": "integer",
          "x-omitempty": false
        },
        "cardTypeId": {
          "type": "integer",
          "x-omitempty": false
        },
        "classId": {
          "type": "integer",
          "x-omitempty": false
        },
        "collectible": {
          "type": "integer",
          "x-omitempty": false
        },
        "duals": {
          "$ref": "#/definitions/duals"
        },
        "flavorText": {
          "type": "string"
        },
        "health": {
          "type": "integer",
          "x-omitempty": false
        },
        "id": {
          "description": "This is the ID from blizzards API",
          "type": "integer"
        },
        "image": {
          "description": "Links to a png-image of the card",
          "type": "string"
        },
        "imageGold": {
          "description": "Links to a png-image of the golden version of the card",
          "type": "string"
        },
        "manaCost": {
          "type": "integer",
          "x-omitempty": false
        },
        "name": {
          "type": "string"
        },
        "parentId": {
          "type": "integer",
          "x-omitempty": false
        },
        "rarityId": {
          "type": "integer",
          "x-omitempty": false
        },
        "text": {
          "type": "string"
        }
      }
    },
    "duals": {
      "type": "object",
      "properties": {
        "constructed": {
          "type": "boolean"
        },
        "relevant": {
          "type": "boolean"
        }
      }
    },
    "error": {
      "type": "object",
      "required": [
        "message"
      ],
      "properties": {
        "code": {
          "description": "HTTPS reponse 400+",
          "type": "integer"
        },
        "message": {
          "type": "string"
        }
      }
    },
    "info": {
      "type": "object",
      "properties": {
        "amountOfCards": {
          "type": "integer",
          "x-omitempty": false
        },
        "lastUpdate": {
          "description": "formatted as RFC 33",
          "type": "string",
          "format": "date-time"
        },
        "systemStartTime": {
          "description": "formatted as RFC 3339",
          "type": "string",
          "format": "date-time"
        }
      }
    }
  }
}`))
	FlatSwaggerJSON = json.RawMessage([]byte(`{
  "consumes": [
    "application/json"
  ],
  "produces": [
    "application/json"
  ],
  "schemes": [
    "http"
  ],
  "swagger": "2.0",
  "info": {
    "description": "Serves Hearthstone cards",
    "title": "Hearthstone Card Service",
    "version": "1.0.0"
  },
  "paths": {
    "/": {
      "get": {
        "tags": [
          "info"
        ],
        "summary": "Get information about the service",
        "responses": {
          "200": {
            "description": "Get current status of amount of cards and last update",
            "schema": {
              "type": "object",
              "$ref": "#/definitions/info"
            }
          },
          "500": {
            "description": "Something went wrong",
            "schema": {
              "$ref": "#/definitions/error"
            }
          }
        }
      }
    },
    "/cards": {
      "get": {
        "tags": [
          "cards"
        ],
        "summary": "Get cards with or without query",
        "parameters": [
          {
            "minLength": 1,
            "type": "string",
            "name": "name",
            "in": "query"
          },
          {
            "minimum": 0,
            "type": "integer",
            "name": "manaCost",
            "in": "query"
          },
          {
            "minimum": 0,
            "type": "integer",
            "name": "health",
            "in": "query"
          },
          {
            "minimum": 0,
            "type": "integer",
            "name": "attack",
            "in": "query"
          },
          {
            "maximum": 14,
            "minimum": 1,
            "type": "integer",
            "name": "class",
            "in": "query"
          },
          {
            "maximum": 5,
            "minimum": 1,
            "type": "integer",
            "name": "rarity",
            "in": "query"
          },
          {
            "minimum": 1,
            "type": "integer",
            "default": 1,
            "name": "page",
            "in": "query"
          },
          {
            "maximum": 100,
            "minimum": 1,
            "type": "integer",
            "default": 20,
            "name": "limit",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Returns the cards based on query. If there is no query, cards will be returned based on their manaCost in ascending order.",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/card"
              }
            }
          },
          "400": {
            "description": "The query is incorrect",
            "schema": {
              "$ref": "#/definitions/error"
            }
          },
          "500": {
            "description": "Something went wrong internally",
            "schema": {
              "$ref": "#/definitions/error"
            }
          }
        }
      }
    },
    "/cards/update": {
      "post": {
        "description": "Checks for updates to cards",
        "tags": [
          "cards"
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "401": {
            "description": "Unauthorized request"
          },
          "500": {
            "description": "Something went wrong internally",
            "schema": {
              "$ref": "#/definitions/error"
            }
          }
        }
      }
    }
  },
  "definitions": {
    "card": {
      "type": "object",
      "properties": {
        "artistName": {
          "type": "string",
          "x-omitempty": false
        },
        "attack": {
          "type": "integer",
          "x-omitempty": false
        },
        "cardSetId": {
          "type": "integer",
          "x-omitempty": false
        },
        "cardTypeId": {
          "type": "integer",
          "x-omitempty": false
        },
        "classId": {
          "type": "integer",
          "x-omitempty": false
        },
        "collectible": {
          "type": "integer",
          "x-omitempty": false
        },
        "duals": {
          "$ref": "#/definitions/duals"
        },
        "flavorText": {
          "type": "string"
        },
        "health": {
          "type": "integer",
          "x-omitempty": false
        },
        "id": {
          "description": "This is the ID from blizzards API",
          "type": "integer"
        },
        "image": {
          "description": "Links to a png-image of the card",
          "type": "string"
        },
        "imageGold": {
          "description": "Links to a png-image of the golden version of the card",
          "type": "string"
        },
        "manaCost": {
          "type": "integer",
          "x-omitempty": false
        },
        "name": {
          "type": "string"
        },
        "parentId": {
          "type": "integer",
          "x-omitempty": false
        },
        "rarityId": {
          "type": "integer",
          "x-omitempty": false
        },
        "text": {
          "type": "string"
        }
      }
    },
    "duals": {
      "type": "object",
      "properties": {
        "constructed": {
          "type": "boolean"
        },
        "relevant": {
          "type": "boolean"
        }
      }
    },
    "error": {
      "type": "object",
      "required": [
        "message"
      ],
      "properties": {
        "code": {
          "description": "HTTPS reponse 400+",
          "type": "integer"
        },
        "message": {
          "type": "string"
        }
      }
    },
    "info": {
      "type": "object",
      "properties": {
        "amountOfCards": {
          "type": "integer",
          "x-omitempty": false
        },
        "lastUpdate": {
          "description": "formatted as RFC 33",
          "type": "string",
          "format": "date-time"
        },
        "systemStartTime": {
          "description": "formatted as RFC 3339",
          "type": "string",
          "format": "date-time"
        }
      }
    }
  }
}`))
}
