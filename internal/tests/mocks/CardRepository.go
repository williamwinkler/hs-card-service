// Code generated by mockery v2.16.0. DO NOT EDIT.

package mocks

import (
	domain "github.com/williamwinkler/hs-card-service/internal/domain"

	mock "github.com/stretchr/testify/mock"
)

// CardRepository is an autogenerated mock type for the CardRepository type
type CardRepository struct {
	mock.Mock
}

// DeleteAll provides a mock function with given fields:
func (_m *CardRepository) DeleteAll() error {
	ret := _m.Called()

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DeleteOne provides a mock function with given fields: _a0
func (_m *CardRepository) DeleteOne(_a0 domain.Card) error {
	ret := _m.Called(_a0)

	var r0 error
	if rf, ok := ret.Get(0).(func(domain.Card) error); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// FindAll provides a mock function with given fields:
func (_m *CardRepository) FindAll() ([]domain.Card, error) {
	ret := _m.Called()

	var r0 []domain.Card
	if rf, ok := ret.Get(0).(func() []domain.Card); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]domain.Card)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// InsertMany provides a mock function with given fields: cards
func (_m *CardRepository) InsertMany(cards []domain.Card) error {
	ret := _m.Called(cards)

	var r0 error
	if rf, ok := ret.Get(0).(func([]domain.Card) error); ok {
		r0 = rf(cards)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// InsertOne provides a mock function with given fields: card
func (_m *CardRepository) InsertOne(card domain.Card) error {
	ret := _m.Called(card)

	var r0 error
	if rf, ok := ret.Get(0).(func(domain.Card) error); ok {
		r0 = rf(card)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UpdateOne provides a mock function with given fields: _a0
func (_m *CardRepository) UpdateOne(_a0 domain.Card) error {
	ret := _m.Called(_a0)

	var r0 error
	if rf, ok := ret.Get(0).(func(domain.Card) error); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

type mockConstructorTestingTNewCardRepository interface {
	mock.TestingT
	Cleanup(func())
}

// NewCardRepository creates a new instance of CardRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewCardRepository(t mockConstructorTestingTNewCardRepository) *CardRepository {
	mock := &CardRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
