// Code generated by mockery v2.16.0. DO NOT EDIT.

package mocks

import (
	domain "github.com/williamwinkler/hs-card-service/internal/domain"

	mock "github.com/stretchr/testify/mock"
)

// HsClient is an autogenerated mock type for the HsClient type
type HsClient struct {
	mock.Mock
}

// GetAllCards provides a mock function with given fields:
func (_m *HsClient) GetAllCards() ([]domain.Card, error) {
	ret := _m.Called()

	var r0 []domain.Card
	if rf, ok := ret.Get(0).(func() []domain.Card); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]domain.Card)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetCardsWithPagination provides a mock function with given fields: page, pageSize
func (_m *HsClient) GetCardsWithPagination(page int, pageSize int) ([]domain.Card, error) {
	ret := _m.Called(page, pageSize)

	var r0 []domain.Card
	if rf, ok := ret.Get(0).(func(int, int) []domain.Card); ok {
		r0 = rf(page, pageSize)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]domain.Card)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(int, int) error); ok {
		r1 = rf(page, pageSize)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetClasses provides a mock function with given fields:
func (_m *HsClient) GetClasses() ([]domain.Class, error) {
	ret := _m.Called()

	var r0 []domain.Class
	if rf, ok := ret.Get(0).(func() []domain.Class); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]domain.Class)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetKeywords provides a mock function with given fields:
func (_m *HsClient) GetKeywords() ([]domain.Keyword, error) {
	ret := _m.Called()

	var r0 []domain.Keyword
	if rf, ok := ret.Get(0).(func() []domain.Keyword); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]domain.Keyword)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetRarities provides a mock function with given fields:
func (_m *HsClient) GetRarities() ([]domain.Rarity, error) {
	ret := _m.Called()

	var r0 []domain.Rarity
	if rf, ok := ret.Get(0).(func() []domain.Rarity); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]domain.Rarity)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetSets provides a mock function with given fields:
func (_m *HsClient) GetSets() ([]domain.Set, error) {
	ret := _m.Called()

	var r0 []domain.Set
	if rf, ok := ret.Get(0).(func() []domain.Set); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]domain.Set)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetTypes provides a mock function with given fields:
func (_m *HsClient) GetTypes() ([]domain.Type, error) {
	ret := _m.Called()

	var r0 []domain.Type
	if rf, ok := ret.Get(0).(func() []domain.Type); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]domain.Type)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type mockConstructorTestingTNewHsClient interface {
	mock.TestingT
	Cleanup(func())
}

// NewHsClient creates a new instance of HsClient. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewHsClient(t mockConstructorTestingTNewHsClient) *HsClient {
	mock := &HsClient{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
